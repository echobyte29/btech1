//Merge sort
#include<stdio.h>
#include<stdlib.h>
void merge(int arr[], int l, int m, int r) {
    int i = l, j = m + 1, k = 0;
    int size=r - l + 1;
    int *temp = (int *)malloc((size) * sizeof(int));
    while (i <= m && j <= r) {
        if (arr[i] < arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
        }
    }

    while (i <= m) {
        temp[k++] = arr[i++];
    }

    while (j <= r) {
        temp[k++] = arr[j++];
    }

    for (int b = 0, a = l; b < r - l + 1; b++, a++) {
        arr[a] = temp[b];
    }

    free(temp);
}
void mergesort(int arr[],int l,int r){
    if(l<r){
       int m=l+(r-l)/2;
        mergesort(arr,l,m);
        mergesort(arr,m+1,r);
        merge(arr,l,m,r);
    }
}
int main(){
int size;
scanf("%d",&size);
int arr[size];
for(int i=0;i<size;i++){
    scanf("%d",&arr[i]);
}
mergesort(arr,0,size-1);
for(int i=0;i<size;i++){
    printf("%d ",arr[i]);
}
    return 0;
}


//SLL Insert at head,middle,end and Delete at head,middle,end
#include <stdio.h>
#include <stdlib.h>
struct Node{
  int data;
  struct Node *next;
};
struct Node *create(struct Node *head){
    struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
    int data;
    scanf("%d",&data);
    ptr->data=data;
    if(head==NULL){
        head=ptr;
        ptr->next=NULL;
    }
    else{
        
    }
}
void print(struct Node *head){
    while(head!=NULL){
        printf("%d->",head->data);
        head=head->next;
    }
}
struct Node *insertHead(struct Node *head,int data){
      struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
      ptr->data=data;
      ptr->next=head;
}
struct Node *insertNode(struct Node *head,int data,int position){
     struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
     struct Node *temp=head;
     int i=0;
     while(i!=position-1){
         temp=temp->next;
         i++;
     }
     ptr->data=data;
     ptr->next=temp->next;
     temp->next=ptr;
     return head;
}
struct Node *deleteHead(struct Node *head){
    struct Node *temp=head;
    head=head->next;
    free(temp);
    return head;
}
struct Node *deleteNode(struct Node *head,int position){
    struct Node *p=head;
    struct Node *q=head->next;
    if(position==0){
        struct Node *temp=head;
    head=head->next;
    free(temp);
    return head;
    }
    int i=0;
    while(i!=position-1){
        p=p->next;
        q=q->next;
        i++;
    }
    p->next=q->next;
    free(q);
    return head;
}
struct Node *deleteEnd(struct Node *head){
     struct Node *p=head;
    struct Node *q=head->next;
     while(q->next!=NULL){
        p=p->next;
        q=q->next;
    }
    p->next=NULL;
    free(q);
    return head;
}
struct Node *insertEnd(struct Node * head,int data){
     struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
     struct Node *temp=head;
     while(temp->next!=NULL){
         temp=temp->next;
     }
    
     ptr->data=data;
      temp->next=ptr;
     ptr->next=NULL;
     return head;
}

int main() {
   struct Node *head=NULL;
   head=create(head);
   head=insertHead(head,2);
   head=insertNode(head,1,2);
   head=insertEnd(head,3);
   head=deleteHead(head);
   head=deleteNode(head,0);
   head=deleteEnd(head);
   print(head);
    return 0;
}



//DLL Insert at head,middle,end and Delete at head,middle,end
#include <stdio.h>
#include <stdlib.h>
struct Node{
    struct Node *prev;
  int data;
  struct Node *next;
};
struct Node *create(struct Node *head){
    struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
    int data;
    scanf("%d",&data);
    ptr->data=data;
    if(head==NULL){
        head=ptr;
        ptr->next=NULL;
        ptr->prev=NULL;
    }
}
void print(struct Node *head){
    while(head!=NULL){
        printf("%d->",head->data);
        head=head->next;
    }
}
struct Node *insertHead(struct Node *head,int data){
      struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
      ptr->data=data;
      ptr->next=head;
      head->prev=ptr;
      ptr->prev=NULL;
}
struct Node *insertNode(struct Node *head,int data,int position){
     struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
     struct Node *temp=head;
     int i=0;
     while(i!=position-1){
         temp=temp->next;
         i++;
     }
   ptr->data = data;          // Assigning data to the new node
ptr->next = temp->next;  
temp->next = ptr; // Linking the new node to the next node after temp
ptr->prev = temp;          // Linking the new node back to temp       // Linking temp to the new node
if (ptr->next != NULL) {
    temp->next->prev = ptr;
}
return head;          
}


struct Node *insertEnd(struct Node * head,int data){
     struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
     struct Node *temp=head;
     while(temp->next!=NULL){
         temp=temp->next;
     }
    
     ptr->data=data;
      temp->next=ptr;
      ptr->prev=temp;
     ptr->next=NULL;
     return head;
}
void reverse(struct Node *head){
    struct Node *temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    while(temp!=NULL){
   printf("%d->",temp->data);
   temp=temp->prev;
    }
}
struct Node *deleteHead(struct Node *head){
    struct Node *temp=head;
    head=head->next;
    free(temp);
    head->prev=NULL;
}
struct Node *deleteNode(struct Node *head,int position){
    struct Node *p=head;
    struct Node *q=head->next;
    int i=0;
    while(i!=position-1 ){
        p=p->next;
        q=q->next;
        i++;
    }
    p->next = q->next;
    if (q->next != NULL){
        q->next->prev = p;
    }
    free(q);
    return head;
}
struct Node *deleteEnd(struct Node *head){
    struct Node *p=head;
    struct Node *q=head->next;
    while(q->next!=NULL){
        p=p->next;
        q=q->next;
    }
     free(q);
    p->next=NULL;
    return head;
}
int main() {
   struct Node *head=NULL;
  head=create(head);
  head=insertHead(head,1);
  head=insertNode(head,2,2);
  head=insertEnd(head,1);
  head=deleteHead(head);
    head=deleteNode(head,2);
    head=deleteEnd(head);
  print(head);
  printf("\n");
   reverse(head);
    return 0;
}



//Queue using a linked list

#include <stdio.h>
#include <stdlib.h>

// Node structure for linked list
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Queue structure
typedef struct Queue {
    Node* front;
    Node* rear;
} Queue;

// Function to create a new node
Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to initialize the queue
Queue* createQueue() {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->front = NULL;
    queue->rear = NULL;
    return queue;
}

// Function to insert an element into the queue
void enqueue(Queue* queue, int value) {
    Node* newNode = createNode(value);
    if (queue->rear == NULL) {
        queue->front = newNode;
        queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
    printf("Inserted %d into the queue.\n", value);
}

// Function to delete an element from the queue
void dequeue(Queue* queue) {
    if (queue->front == NULL) {
        printf("Queue is empty.\n");
        return;
    }
    Node* temp = queue->front;
    int value = temp->data;
    queue->front = queue->front->next;
    if (queue->front == NULL) {
        queue->rear = NULL;
    }
    free(temp);
    printf("Deleted %d from the queue.\n", value);
}

// Function to display the elements in the queue
void display(Queue* queue) {
    if (queue->front == NULL) {
        printf("NULL\n");
        return;
    }
    Node* temp = queue->front;
    printf("Queue: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

//or

void display(Queue* queue) {
    if (queue->front == NULL) {
        printf("NULL\n");
      return;
    }

    Node* temp = queue->front;
    printf("->");  // Print the initial "->"

    while (temp != NULL) {
        printf("%d", temp->data);  // Remove "->" after printing the data

        if (temp->next != NULL) {  // Check if there is a next node
            printf("->");  // Print "->" only if there is a next node
        }

        temp = temp->next;
    }

    printf("\n");  // Print a newline at the end
}

int main() {
    Queue* queue = createQueue();
    int choice, value;
    while (1) {
        printf("1. Insert\n2. Delete\n3. Display\n4. Exit\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                enqueue(queue, value);
                break;
            case 2:
                dequeue(queue);
                break;
            case 3:
                display(queue);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }
    return 0;
}
