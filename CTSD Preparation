//Linked List Program 1:
#include <stdio.h>
#include<stdlib.h>
struct node {
    int data1;
    int data2;
    struct node* link;
};
int main(void) {
    int input;
    struct node* head;
    head=(struct node*)malloc(sizeof(struct node));
    head->data1=45;
    head->data2=56;
    head->link=NULL;
    printf("Which node do you want to print??\n");        //random try, actually printf("%d",head->data);
    scanf("%d",&input);
    switch (input) {
  case 1:
    printf("%d",head->data1);                    
    break;
  case 2:
    printf("%d",head->data2);
    break;
  default:
    printf("Node doesn't exist");
}}

//Linked list program 2:
#include <stdio.h>
#include<stdlib.h>
struct node {
    int data;
    struct node* link;
};
int main() {
    struct node* head=malloc(sizeof(struct node));
    head->data=45;
    head->link=NULL;                                              //doesn't get any output
    struct node* current=malloc(sizeof(struct node));
    current->data=98;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data;
    current->link=NULL;
    head->link->link=current;
    return 0;
}




















//Finding length of a string without using string function
#include <stdio.h>
int len(const char *str) {
  int length = 0;
  while (*str != '\0') {
    length++;
    str++;
  }
  return length;
}
int main(void) {
  char str[] = "Hello, world!";
  int length = len(str);
  printf("The length of the string '%s' is %d\n", str, length);
}

//strcpy function
#include <stdio.h>
#include <string.h>
int main(void) {
  char source[] = "Sameer";
  char destination[20];
  strcpy(destination, source);
  printf("Original string: %s\n", source);
  printf("Copied string: %s\n", destination);
}

//strcat function
#include <stdio.h>
#include <string.h>
int main(void) {
  char source[] = "Sameer";
  char dest[] = " Farhad";
  strcat(source, dest);
  printf("Copied string: %s\n", source);
}

//strcmp function
#include <stdio.h>
#include <string.h>
int main(void) {
  char source[] = "Sameer";
  char dest[] = "Farhad";
  int a = strcmp(source, dest);
  if (a<0)
  printf("source %s is smaller than dest %s",source,dest);
  else if (a>0)
  printf("destination %s is greater than source %s",dest,source);
  else if (a=0)
  printf("source %s has same length as destination %s",source,dest);
}

//strstr function
#include <stdio.h>
#include <string.h>
int main(void) {
  char source[] = "Sameer";
  char dest[] = "am";
  char* a = strstr(source, dest);
  if (a)
  printf("string found");
  else
  printf("not found");
}

//DMA
//malloc
#include<stdio.h>
#include<stdlib.h>
int main(){
int n;
scanf("%d",&n);
int *ptr=(int*)malloc(n*sizeof(int));
if(ptr==NULL){
printf("ERROR");
exit(1);
}
else{
for(int i=0;i<n;i++){
scanf("%d",ptr+i);
printf("%d\n",(ptr+i));
}}
return 0;
}
//calloc
#include<stdio.h>
#include<stdlib.h>
int main(){
int n;
scanf("%d",&n);
int *ptr=(int*)calloc(n,sizeof(int));
if(ptr==NULL){
printf("ERROR");
exit(1);
}
else{
for(int i=0;i<n;i++){
scanf("%d",ptr+i);
printf("%d\n",(ptr+i));
}}
return 0;
}
//realloc
#include<stdio.h>
#include<stdlib.h>
int main(){
    int *ptr=(int *)malloc(2*sizeof(int));
    if(ptr==NULL){
        printf("ERROR");
        exit(1);
    }
        for(int i=0;i<2;i++){
            scanf("%d",ptr+i);
        }
        ptr=(int *)realloc(ptr,4*sizeof(int));
        if(ptr==NULL)
        printf("ERROR");

            for(int i=2;i<4;i++){
                scanf("%d",ptr+i);}
                for(int i=0;i<4;i++){
                    printf("%d\n",*(ptr+i));
                }
    return 0;
    }

//Linear Search

//Binary Search

