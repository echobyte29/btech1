//DOC-20231228-WA0000. Solutions
//Calculator without using function
#include <stdio.h>
int main() {
 char operation;
  float a,b;
  scanf("%f %f\n", &a, &b);
  scanf("%c", &operation);

  switch (operation) {
    case '+':
      printf("%.1f+%.1f=%.2f",a,b,a+b);
      break;
    case '-':
      printf("%.1f-%.1f=%.2f",a,b,a-b);
      break;
    case '*':
      printf("%.1f*%.1f=%.2f",a,b,a*b);
      break;
    case '/':
      printf("%.1f/%.1f=%.2f",a,b,a/b);
      break;
    default:
      printf("Error");
  }

  return 0;
}

//Calculator using function
    
//Finding factorial of a positive integer using recursion
#include<stdio.h>
int fact(int n);
int main() {
    int n;
    printf("Enter a positive integer: ");
    scanf("%d",&n);
    printf("Factorial of %d = %d",n,fact(n));
}
int fact(int n){
    if(n>=1) return n*fact(n-1);
    else return 1;
}

//Sum of terms 9+99+999...
#include <stdio.h>
int main(){
int n,i,t=9;
int sum=0;
printf("Input the number or terms: ");
scanf("%d", &n);
for (i=0;i<n;i++){
    sum=sum+t;
    t=(t*10)+9;
        }
printf("\nsum=%d",sum);
    }

//Temperature cases
#include<stdio.h>
int main(void){
int a;
printf("Enter temperature: ");
scanf("%d",&a);
if (a<0) printf("Freezing");
else if (a>0 && a<=10) printf("Cold");
else if (a>10 && a<=20) printf("Moderate");
else if (a>20) printf("Warm");
}

//Student Score Grades
#include<stdio.h>
    int main(void){
    int a;
    printf("Enter student score: ");
    scanf("%d",&a);
    switch(a/10){
        case (10):
        case (9):
        printf("A");
        break;
        case (8):
        printf("B");
        break;
        case (7):
        printf("C");
        break;
        case (6):
        printf("D");
        break;
        case (5):
        printf("F");
        break;
        default:
        printf("Marks not categorized");
    }
    }

//Leap year
#include <stdio.h>
int main(){
   int y; 
   printf("Enter the year to check: ");
   scanf("%d",&y);
   if (((y%4==0)&&(y%100!=0))||(y%400==0))
      printf("It is a leap year");
   else printf("It is not a leap year");
   return 0;
    }

//Check if character is a vowel
#include <stdio.h>
int main(){
    char c;
    int lv,uv;
    printf("Enter an alphabet: ");
    scanf("%c", &c);
    lv=(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
    uv=(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U');
    if (lv||uv) printf("%c is a vowel.", c);
    else printf("%c is a consonant.", c);
    return 0;
}

//Check whether the integer is positive or negative
#include <stdio.h>
int main(){
    int a;
    printf("Enter a integer: ");
    scanf("%d",&a);
    if (a<0) printf("%d is negative",a);
    else if (a>0) printf("%d is positive",a);
    else printf("Integer is 0");
    return 0;
}

//Pattern printing *
#include<stdio.h>
int main(void){
int n;
scanf("%d",&n);
for(int i=1;i<=n;i++){
for(int j=1;j<=i;j++){
printf("*");
}
printf("\n");
}
}

//perfect number
#include <stdio.h>
int main() {
    int n,s=0;
    scanf("%d",&n);
    for(int i=1;i<n;i++){
        if(n%i==0)
        s=s+i;
    }
    if(s==n)
    printf("yes");  
  return 0;
}

//Distance between two cities with coordinates
#include <stdio.h>
#include <math.h>
int main() {
    float x1,y1,x2,y2;
    scanf("%f%f%f%f",&x1,&y1,&x2,&y2);
    int result=((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1));
    printf("%.4f",sqrt(result));
    return 0;
}

//square of a number
#include <stdio.h>
int mul(int n){
return n*n;
}
int main(){
    int a;
    scanf("%d",&a);
    int result=mul(a);
    printf("%d",result);
    return 0;
}









//Linked List Program 1:
#include <stdio.h>
#include<stdlib.h>
struct node {
    int data1;
    int data2;
    struct node* link;
};
int main(void) {
    int input;
    struct node* head;
    head=(struct node*)malloc(sizeof(struct node));
    head->data1=45;
    head->data2=56;
    head->link=NULL;
    printf("Which node do you want to print??\n");        //random try, actually printf("%d",head->data);
    scanf("%d",&input);
    switch (input) {
  case 1:
    printf("%d",head->data1);                    
    break;
  case 2:
    printf("%d",head->data2);
    break;
  default:
    printf("Node doesn't exist");
}}

//Linked list program 2:
#include <stdio.h>
#include<stdlib.h>
struct node {
    int data;
    struct node* link;
};
int main() {
    struct node* head=malloc(sizeof(struct node));
    head->data=45;
    head->link=NULL;                                              //doesn't get any output
    struct node* current=malloc(sizeof(struct node));
    current->data=98;
    current->link=NULL;
    head->link=current;
    current=malloc(sizeof(struct node));
    current->data;
    current->link=NULL;
    head->link->link=current;
    return 0;
}

//Linked list program 3(printing the data in nodes)
#include <stdio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node* link;
};
void print_data(struct node* head){    
    if(head=NULL)
    printf("Linked List is empty");
    struct node* ptr=NULL;
    ptr=head;
    while(ptr!=NULL){
        printf("%d ",ptr->data);
        ptr=ptr->link;
    }}
int main() {
    print_data(head);
}

//Linked list program 4(counting the number of nodes)
#include <stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node* link;
};
void count_of_nodes(struct node* head){   
    int count=0;
    if(head=NULL)
    printf("Linked List is empty");
    struct node* ptr=NULL;
    ptr=head;
    while(ptr!=NULL){
        count++;
        ptr=ptr->link;
    }
printf("%d",count);
}
int main() {
    count_of_nodes(head);
}

//Linked list program 5(Inserting a Node at the End)
#include<stdio.h>
struct node{
int data;
struct node* link;
};
void add_at_end(struct node *head, int data){
struct node *ptr, *temp;
ptr=head;
temp=(struct node*)malloc(sizeof(struct node));

temp->data=data;
temp->link=NULL;

while(ptr->link!=NULL){
ptr=ptr->link;
}
ptr->link=temp;
}

int main(){
add_at_end(head,67//data of last node);
}



















//Finding length of a string without using string function
#include <stdio.h>
int len(const char *str) {
  int length = 0;
  while (*str != '\0') {
    length++;
    str++;
  }
  return length;
}
int main(void) {
  char str[] = "Hello, world!";
  int length = len(str);
  printf("The length of the string '%s' is %d\n", str, length);
}

//strcpy function
#include <stdio.h>
#include <string.h>
int main(void) {
  char source[] = "Sameer";
  char destination[20];
  strcpy(destination, source);
  printf("Original string: %s\n", source);
  printf("Copied string: %s\n", destination);
}

//strcat function
#include <stdio.h>
#include <string.h>
int main(void) {
  char source[] = "Sameer";
  char dest[] = " Farhad";
  strcat(source, dest);
  printf("Copied string: %s\n", source);
}

//strcmp function
#include <stdio.h>
#include <string.h>
int main(void) {
  char source[] = "Sameer";
  char dest[] = "Farhad";
  int a = strcmp(source, dest);
  if (a<0)
  printf("source %s is smaller than dest %s",source,dest);
  else if (a>0)
  printf("destination %s is greater than source %s",dest,source);
  else if (a=0)
  printf("source %s has same length as destination %s",source,dest);
}

//strstr function
#include <stdio.h>
#include <string.h>
int main(void) {
  char source[] = "Sameer";
  char dest[] = "am";
  char* a = strstr(source, dest);
  if (a)
  printf("string found");
  else
  printf("not found");
}

//DMA
//malloc
#include<stdio.h>
#include<stdlib.h>
int main(){
int n;
scanf("%d",&n);
int *ptr=(int*)malloc(n*sizeof(int));
if(ptr==NULL){
printf("ERROR");
exit(1);
}
else{
for(int i=0;i<n;i++){
scanf("%d",ptr+i);
printf("%d\n",(ptr+i));
}}
return 0;
}
//calloc
#include<stdio.h>
#include<stdlib.h>
int main(){
int n;
scanf("%d",&n);
int *ptr=(int*)calloc(n,sizeof(int));
if(ptr==NULL){
printf("ERROR");
exit(1);
}
else{
for(int i=0;i<n;i++){
scanf("%d",ptr+i);
printf("%d\n",(ptr+i));
}}
return 0;
}
//realloc
#include<stdio.h>
#include<stdlib.h>
int main(){
    int *ptr=(int *)malloc(2*sizeof(int));
    if(ptr==NULL){
        printf("ERROR");
        exit(1);
    }
        for(int i=0;i<2;i++){
            scanf("%d",ptr+i);
        }
        ptr=(int *)realloc(ptr,4*sizeof(int));
        if(ptr==NULL)
        printf("ERROR");

            for(int i=2;i<4;i++){
                scanf("%d",ptr+i);}
                for(int i=0;i<4;i++){
                    printf("%d\n",*(ptr+i));
                }
    return 0;
    }

//Linear Search
#include<stdio.h>
int search(int arr[],int n,int x){
    for(int i=0;i<n;i++)
    if(arr[i]==x){
        return i;
    }
    return -1;
}
int main(){
    int x;
    int arr[]={7,4,1,8,5,2,96,3};
    scanf("%d",&x);
    int n=(sizeof(arr)/sizeof(arr[0]));
    int result=search(arr,n,x);
    if(result==-1)
    printf("not found");
    else printf("element is at index %d",result);
    return 0;
}

//Binary Search
#include <stdio.h>
int Search(int arr[],int l,int r,int x){
    while (l<=r) {
        int m=(l+r)/2;
        if (arr[m]==x)               //l is first index, r is last index, m is mid
            return m;
        if (arr[m]<x)
            l=m+1;
        else
            r=m-1;
    }
    return -1;
}
int main(){
    int find;
    int arr[]={2,3,4,5,6,7,8,9};
    int n=sizeof(arr)/sizeof(arr[0]);
    scanf("%d",&find);
    int r=Search(arr,0,n-1,find);
    (r==-1)?printf("Element is not in array"):printf("element is at index %d",r);
    return 0;
}

//Bubble sort
#include <stdio.h>  
void ooga_booga(int arr[],int n){
  for(int i=0;i<n;i++){  
    for(int j=0;j<n-1;j++){  
      if(arr[j]>arr[j+1]){  
        int temp=arr[j];  
        arr[j]=arr[j+1];  
        arr[j+1]=temp;}}}}
int main() {  
  int arr[]={7,8,9,4,5,6,3,1,2,78,41,48,85};  
  int n=sizeof(arr)/sizeof(arr[0]);  
  ooga_booga(arr,n);  
  printf("Sorted array is: ");  
  for(int i=0;i<n;i++){  
    printf("%d ",arr[i]);  
  }
  return 0;  
}

//Insertion sort
#include<stdio.h>
void printarray(int arr[], int n){
    for(int i=0;i<n;i++){
        printf("%d ", arr[i]);
    }
    printf("\n");
}
void insertionsort(int arr[], int n){
    for(int j=1;j<n;j++){
        int temp=arr[j];
        while(j>0&&temp<arr[j-1]){
        arr[j]=arr[j-1];
        j--;
        }
        arr[j]=temp;
    }}
    int main(){
        int x;
        printf("Enter no. of elements: ");
    scanf("%d",&x);
    int arr[x];
    printf("Enter the elements: ");
    for (int i=0;i<x;i++){
        scanf("%d",&arr[i]);}
        int n=sizeof(arr)/sizeof(arr[0]);
        insertionsort(arr,n);
        printf("Sorted array is: ");
        printarray(arr,n);
    }

//Insertion sort step wise
#include <stdio.h>
int main(){
    int n,j,t;
    scanf("%d",&n);
    int a[n];
    for(int i=0;i<n;i++){
        scanf("%d",&a[i]);
    }
    for(int i=1;i<n;i++){
        j=i;
        while(j>0 && a[j-1]>a[j]){
            t=a[j];
            a[j]=a[j-1];
            a[j-1]=t;
        j--;
        }
        for(int i=0;i<n;i++){
    printf("%d ",a[i]);
}
printf("\n");
    }

return 0;
}

//shell sort
#include <stdio.h>  
void printarray(int a[], int n){
    for (int i=0;i<n;i++)  
        printf("%d ",a[i]);  
}
void shellsort(int a[], int n){
    for(int x=n/2;x>0;x=x/2){  
        for(int i=x;i<n;i=i+1){
            int temp=a[i];    
            for(int j=i; j>=x && a[j-x]>temp; j=j-x)  {
                a[j] = a[j-x];
                a[j] = temp;
            }
        }  
    }  
}
int main(){
    int x;
    scanf("%d",&x);
    int a[x];
    for(int i=0;i<x;i++){scanf("%d",&a[i]);}
    int n = sizeof(a) / sizeof(a[0]);
    shellsort(a, n);  
    printf("\nafter shell sort: ");    
    printarray(a, n);  
    return 0;  
}  
    
